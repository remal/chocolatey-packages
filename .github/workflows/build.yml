name: build

on:
  push:
    branches:
    - main
  pull_request: { }
  workflow_dispatch: { }

env:
  CHANGED_PACKAGES_FILE: 'changed-packages.tmp.txt'
  CHOCO_REMAL_PACKAGES_REPOSITORY: 'https://f.feedz.io/remal/chocolatey-packages/nuget'
  LATEST_JDK_VERSION: 21.0.0+35.0.LTS

defaults:
  run:
    shell: cmd

jobs:
  build:
    if: ${{
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
      || (github.event_name == 'push' && !startsWith(github.event.head_commit.message, '[push-back]'))
      || github.event_name != 'push'
      }}
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0


    # Initialize a list of changed packages:
    - name: Get changed files
      id: get-changed-files
      run: |
        calculate-diff-from-last-publish-commit

    - name: Create `changed-packages.tmp.txt` file
      run: |
        type NUL > changed-packages.tmp.txt


    # Generate packages:
    - name: Check latest JDK package
      id: check-latest-jdk-package
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          const jdkVer = process.env.LATEST_JDK_VERSION.split(/\./)[0] | 0
          core.info(`version: ${jdkVer}`)
          core.setOutput('version', jdkVer)
          const packageNames = [`remal-jdk${jdkVer}`, `remal-jdk${jdkVer}-main`]
          const exists = packageNames.every(packageName => fs.existsSync(`${packageName}/${packageName}.nuspec`))
          core.info(`exists: ${exists}`)
          core.setOutput('exists', exists ? 'true' : 'false')

    - name: Generate JDK ${{steps.check-latest-jdk-package.outputs.version}} packages
      if: ${{steps.check-latest-jdk-package.outputs.exists != 'true'}}
      uses: actions/github-script@v6
      env:
        JDK_VERSIONS_TO_GENERATE: ${{steps.check-latest-jdk-package.outputs.version}}
      with:
        script: |
          require(process.cwd() + '/jdk-generate')

    - name: Collect changed JDK packages
      id: get-changed-jdk-packages
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          const changedPackages = []
          const changedFiles = process.env.CHANGED_FILES.split(':').map(it => it.trim()).filter(it => !!it.length)
          if (changedFiles.some(file => file.includes('jdk-generate'))) {
            const latestJdkVersion = process.env.LATEST_JDK_VERSION.split(/\./)[0] | 0
            for (let jdkVer = 8; jdkVer <= latestJdkVersion; ++jdkVer) {
              changedPackages.push(`remal-jdk${jdkVer}`)
              changedPackages.push(`remal-jdk${jdkVer}-main`)
            }
          }
          core.info(`changedPackages: ${changedPackages.join(' ')}`)
          core.setOutput('count', changedPackages.length)
          fs.appendFileSync('changed-packages.tmp.txt', '\n\n' + changedPackages.join('\n'), 'utf8')

    - name: Generate JDK packages
      if: ${{steps.get-changed-jdk-packages.outputs.count > 0}}
      uses: actions/github-script@v6
      with:
        script: |
          require(process.cwd() + '/jdk-generate')

    - name: Collect changed NPP Plugin packages
      id: get-changed-npp-plugin-packages
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          const changedPackages = []
          const changedFiles = process.env.CHANGED_FILES.split(':').map(it => it.trim()).filter(it => !!it.length)
          if (changedFiles.some(file => file.includes('npp-plugins-generate'))) {
            require('./npp-plugins-generate-config')
              .map(plugin => plugin.packageName)
              .forEach(packageName => changedPackages.push(packageName))
          }
          core.info(`changedPackages: ${changedPackages.join(' ')}`)
          core.setOutput('count', changedPackages.length)
          fs.appendFileSync('changed-packages.tmp.txt', '\n\n' + changedPackages.join('\n'), 'utf8')

    - name: Generate Notepad++ plugin packages
      if: ${{steps.get-changed-npp-plugin-packages.outputs.count > 0}}
      uses: actions/github-script@v6
      with:
        script: |
          require(process.cwd() + '/npp-plugins-generate')


    # Process general changed packages:
    - name: Get general changed packages
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          const packageNames = fs.readdirSync('.')
            .filter(file => !file.startsWith('.'))
            .filter(packageName => fs.existsSync(`${packageName}/${packageName}.nuspec`))
          core.debug(`packageNames: ${packageNames.join(' ')}`)
          const changedFiles = process.env.CHANGED_FILES.split(':').map(it => it.trim()).filter(it => !!it.length)
          core.info(`changedFiles: ${changedFiles.join(' ')}`)
          const changedPackages = packageNames
            .filter(packageName => changedFiles.some(file => file.startsWith(`${packageName}/`)))
          core.info(`changedPackages: ${changedPackages.join(' ')}`)
          fs.appendFileSync('changed-packages.tmp.txt', '\n\n' + changedPackages.join('\n'), 'utf8')


    # Canonize the list of changed packages:
    - name: Process `changed-packages.tmp.txt` file
      id: get-changed-packages
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          const changedPackages = fs.readFileSync('changed-packages.tmp.txt', 'utf8').split(/[\n\r]+/)
            .map(it => it.trim())
            .filter(it => !!it.length)
            .filter((value, index, array) => array.indexOf(value) === index)
          core.info(`changedPackages: ${changedPackages.join(' ')}`)
          core.setOutput('count', changedPackages.length)
          fs.writeFileSync('changed-packages.tmp.txt', changedPackages.join('\n'), 'utf8')


    # Build packages:
    - name: Update versions
      if: ${{steps.get-changed-packages.outputs.count > 0}}
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs')
          const version = Math.floor(Date.now() / 1000)
          const packageNames = fs.readFileSync('changed-packages.tmp.txt', 'utf8').split(/[\n\r]+/)
            .map(it => it.trim())
            .filter(it => !!it.length)
            .filter(packageName => fs.existsSync(`${packageName}/${packageName}.nuspec`))
          packageNames.forEach(packageName => {
            core.info(`Setting version of ${packageName} to ${version}`)
            const packageNuspecFile = `${packageName}/${packageName}.nuspec`
            let content = fs.readFileSync(packageNuspecFile, 'utf8').replace(/^\uFEFF/, '')
            content = content.replace(/<version>[\s\S]*?<\/version>/, `<version>${version}.0.0</version>`)
            fs.writeFileSync(packageNuspecFile, '\uFEFF' + content, 'utf8')
          })

    - name: Setup Chocolatey
      run: |
        choco feature enable --name allowGlobalConfirmation || exit /B !ERRORLEVEL!
        rem choco feature disable --name checksumFiles || exit /B !ERRORLEVEL!
        choco feature enable --name allowEmptyChecksums || exit /B !ERRORLEVEL!
        choco feature enable --name failOnAutoUninstaller || exit /B !ERRORLEVEL!
        choco feature enable --name removePackageInformationOnUninstall || exit /B !ERRORLEVEL!
        choco feature disable --name stopOnFirstPackageFailure || exit /B !ERRORLEVEL!
        choco feature enable --name useRememberedArgumentsForUpgrades || exit /B !ERRORLEVEL!
        choco feature disable --name showDownloadProgress
        choco feature disable --name usePackageRepositoryOptimizations

    - name: Pack and test
      if: ${{
        steps.get-changed-packages.outputs.count > 0
        && (
          (github.event_name == 'push' && github.ref != 'refs/heads/main')
          || (github.event_name != 'push')
        )
        }}
      run: |
        build-changed "N"
        if !ERRORLEVEL! NEQ 0 (
          exit !ERRORLEVEL!
        )

    - name: Pack, test, and publish
      if: ${{
        steps.get-changed-packages.outputs.count > 0
        && github.event_name == 'push'
        && github.ref == 'refs/heads/main'
        }}
      run: |
        build-changed "Y" "${{secrets.FEEDZ_IO_TOKEN}}"
        if !ERRORLEVEL! NEQ 0 (
          exit !ERRORLEVEL!
        )


    # Push back:
    - name: Push back
      env:
        PUSH_BACK_TOKEN: ${{secrets.PUSH_BACK_TOKEN}}
      if: ${{env.PUSH_BACK_TOKEN && github.event_name == 'push' && github.ref == 'refs/heads/main'}}
      uses: remal-github-actions/push-back@v1
      with:
        githubToken: ${{env.PUSH_BACK_TOKEN}}
        message: '[push-back] Push-back updated files during build'
